// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <org.kotlincrypto.bitops:endian>
sealed class org.kotlincrypto.bitops.endian/Endian { // org.kotlincrypto.bitops.endian/Endian|null[0]
    abstract fun intFrom(kotlin/ByteArray, kotlin/Int): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.intFrom|intFrom(kotlin.ByteArray;kotlin.Int){}[0]
    abstract fun intOf(kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.intOf|intOf(kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte){}[0]
    abstract fun longFrom(kotlin/ByteArray, kotlin/Int): kotlin/Long // org.kotlincrypto.bitops.endian/Endian.longFrom|longFrom(kotlin.ByteArray;kotlin.Int){}[0]
    abstract fun longOf(kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte): kotlin/Long // org.kotlincrypto.bitops.endian/Endian.longOf|longOf(kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte){}[0]
    abstract fun packUnsafe(kotlin/Int, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.packUnsafe|packUnsafe(kotlin.Int;kotlin.ByteArray;kotlin.Int){}[0]
    abstract fun packUnsafe(kotlin/Int, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.packUnsafe|packUnsafe(kotlin.Int;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    abstract fun packUnsafe(kotlin/Long, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.packUnsafe|packUnsafe(kotlin.Long;kotlin.ByteArray;kotlin.Int){}[0]
    abstract fun packUnsafe(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.packUnsafe|packUnsafe(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    abstract fun packUnsafe(kotlin/Short, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.packUnsafe|packUnsafe(kotlin.Short;kotlin.ByteArray;kotlin.Int){}[0]
    abstract fun packUnsafe(kotlin/Short, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.packUnsafe|packUnsafe(kotlin.Short;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    abstract fun shortFrom(kotlin/ByteArray, kotlin/Int): kotlin/Short // org.kotlincrypto.bitops.endian/Endian.shortFrom|shortFrom(kotlin.ByteArray;kotlin.Int){}[0]
    abstract fun shortOf(kotlin/Byte, kotlin/Byte): kotlin/Short // org.kotlincrypto.bitops.endian/Endian.shortOf|shortOf(kotlin.Byte;kotlin.Byte){}[0]
    final fun pack(kotlin/Int, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.pack|pack(kotlin.Int;kotlin.ByteArray;kotlin.Int){}[0]
    final fun pack(kotlin/Int, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.pack|pack(kotlin.Int;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun pack(kotlin/Long, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.pack|pack(kotlin.Long;kotlin.ByteArray;kotlin.Int){}[0]
    final fun pack(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.pack|pack(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun pack(kotlin/Short, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.pack|pack(kotlin.Short;kotlin.ByteArray;kotlin.Int){}[0]
    final fun pack(kotlin/Short, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.pack|pack(kotlin.Short;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
    final fun toString(): kotlin/String // org.kotlincrypto.bitops.endian/Endian.toString|toString(){}[0]

    final object Big : org.kotlincrypto.bitops.endian/Endian { // org.kotlincrypto.bitops.endian/Endian.Big|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.kotlincrypto.bitops.endian/Endian.Big.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.Big.hashCode|hashCode(){}[0]
        final fun intFrom(kotlin/ByteArray, kotlin/Int): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.Big.intFrom|intFrom(kotlin.ByteArray;kotlin.Int){}[0]
        final fun intOf(kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.Big.intOf|intOf(kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte){}[0]
        final fun longFrom(kotlin/ByteArray, kotlin/Int): kotlin/Long // org.kotlincrypto.bitops.endian/Endian.Big.longFrom|longFrom(kotlin.ByteArray;kotlin.Int){}[0]
        final fun longOf(kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte): kotlin/Long // org.kotlincrypto.bitops.endian/Endian.Big.longOf|longOf(kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte){}[0]
        final fun packUnsafe(kotlin/Int, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.packUnsafe|packUnsafe(kotlin.Int;kotlin.ByteArray;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Int, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.packUnsafe|packUnsafe(kotlin.Int;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Long, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.packUnsafe|packUnsafe(kotlin.Long;kotlin.ByteArray;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.packUnsafe|packUnsafe(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Short, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.packUnsafe|packUnsafe(kotlin.Short;kotlin.ByteArray;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Short, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.packUnsafe|packUnsafe(kotlin.Short;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun shortFrom(kotlin/ByteArray, kotlin/Int): kotlin/Short // org.kotlincrypto.bitops.endian/Endian.Big.shortFrom|shortFrom(kotlin.ByteArray;kotlin.Int){}[0]
        final fun shortOf(kotlin/Byte, kotlin/Byte): kotlin/Short // org.kotlincrypto.bitops.endian/Endian.Big.shortOf|shortOf(kotlin.Byte;kotlin.Byte){}[0]
        final inline fun (kotlin/ByteArray).beIntAt(kotlin/Int): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.Big.beIntAt|beIntAt@kotlin.ByteArray(kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).beLongAt(kotlin/Int): kotlin/Long // org.kotlincrypto.bitops.endian/Endian.Big.beLongAt|beLongAt@kotlin.ByteArray(kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePack(kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePack|bePack@kotlin.ByteArray(kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePack(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePack|bePack@kotlin.ByteArray(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePack(kotlin/Long, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePack|bePack@kotlin.ByteArray(kotlin.Long;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePack(kotlin/Long, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePack|bePack@kotlin.ByteArray(kotlin.Long;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePack(kotlin/Short, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePack|bePack@kotlin.ByteArray(kotlin.Short;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePack(kotlin/Short, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePack|bePack@kotlin.ByteArray(kotlin.Short;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePackUnsafe(kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePackUnsafe|bePackUnsafe@kotlin.ByteArray(kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePackUnsafe(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePackUnsafe|bePackUnsafe@kotlin.ByteArray(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePackUnsafe(kotlin/Long, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePackUnsafe|bePackUnsafe@kotlin.ByteArray(kotlin.Long;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePackUnsafe(kotlin/Long, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePackUnsafe|bePackUnsafe@kotlin.ByteArray(kotlin.Long;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePackUnsafe(kotlin/Short, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePackUnsafe|bePackUnsafe@kotlin.ByteArray(kotlin.Short;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).bePackUnsafe(kotlin/Short, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Big.bePackUnsafe|bePackUnsafe@kotlin.ByteArray(kotlin.Short;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).beShortAt(kotlin/Int): kotlin/Short // org.kotlincrypto.bitops.endian/Endian.Big.beShortAt|beShortAt@kotlin.ByteArray(kotlin.Int){}[0]
    }

    final object Little : org.kotlincrypto.bitops.endian/Endian { // org.kotlincrypto.bitops.endian/Endian.Little|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // org.kotlincrypto.bitops.endian/Endian.Little.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.Little.hashCode|hashCode(){}[0]
        final fun intFrom(kotlin/ByteArray, kotlin/Int): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.Little.intFrom|intFrom(kotlin.ByteArray;kotlin.Int){}[0]
        final fun intOf(kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.Little.intOf|intOf(kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte){}[0]
        final fun longFrom(kotlin/ByteArray, kotlin/Int): kotlin/Long // org.kotlincrypto.bitops.endian/Endian.Little.longFrom|longFrom(kotlin.ByteArray;kotlin.Int){}[0]
        final fun longOf(kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte, kotlin/Byte): kotlin/Long // org.kotlincrypto.bitops.endian/Endian.Little.longOf|longOf(kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte;kotlin.Byte){}[0]
        final fun packUnsafe(kotlin/Int, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.packUnsafe|packUnsafe(kotlin.Int;kotlin.ByteArray;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Int, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.packUnsafe|packUnsafe(kotlin.Int;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Long, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.packUnsafe|packUnsafe(kotlin.Long;kotlin.ByteArray;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Long, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.packUnsafe|packUnsafe(kotlin.Long;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Short, kotlin/ByteArray, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.packUnsafe|packUnsafe(kotlin.Short;kotlin.ByteArray;kotlin.Int){}[0]
        final fun packUnsafe(kotlin/Short, kotlin/ByteArray, kotlin/Int, kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.packUnsafe|packUnsafe(kotlin.Short;kotlin.ByteArray;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun shortFrom(kotlin/ByteArray, kotlin/Int): kotlin/Short // org.kotlincrypto.bitops.endian/Endian.Little.shortFrom|shortFrom(kotlin.ByteArray;kotlin.Int){}[0]
        final fun shortOf(kotlin/Byte, kotlin/Byte): kotlin/Short // org.kotlincrypto.bitops.endian/Endian.Little.shortOf|shortOf(kotlin.Byte;kotlin.Byte){}[0]
        final inline fun (kotlin/ByteArray).leIntAt(kotlin/Int): kotlin/Int // org.kotlincrypto.bitops.endian/Endian.Little.leIntAt|leIntAt@kotlin.ByteArray(kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).leLongAt(kotlin/Int): kotlin/Long // org.kotlincrypto.bitops.endian/Endian.Little.leLongAt|leLongAt@kotlin.ByteArray(kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePack(kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePack|lePack@kotlin.ByteArray(kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePack(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePack|lePack@kotlin.ByteArray(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePack(kotlin/Long, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePack|lePack@kotlin.ByteArray(kotlin.Long;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePack(kotlin/Long, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePack|lePack@kotlin.ByteArray(kotlin.Long;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePack(kotlin/Short, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePack|lePack@kotlin.ByteArray(kotlin.Short;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePack(kotlin/Short, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePack|lePack@kotlin.ByteArray(kotlin.Short;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePackUnsafe(kotlin/Int, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePackUnsafe|lePackUnsafe@kotlin.ByteArray(kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePackUnsafe(kotlin/Int, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePackUnsafe|lePackUnsafe@kotlin.ByteArray(kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePackUnsafe(kotlin/Long, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePackUnsafe|lePackUnsafe@kotlin.ByteArray(kotlin.Long;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePackUnsafe(kotlin/Long, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePackUnsafe|lePackUnsafe@kotlin.ByteArray(kotlin.Long;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePackUnsafe(kotlin/Short, kotlin/Int): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePackUnsafe|lePackUnsafe@kotlin.ByteArray(kotlin.Short;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).lePackUnsafe(kotlin/Short, kotlin/Int, kotlin/Int, kotlin/Int =...): kotlin/ByteArray // org.kotlincrypto.bitops.endian/Endian.Little.lePackUnsafe|lePackUnsafe@kotlin.ByteArray(kotlin.Short;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final inline fun (kotlin/ByteArray).leShortAt(kotlin/Int): kotlin/Short // org.kotlincrypto.bitops.endian/Endian.Little.leShortAt|leShortAt@kotlin.ByteArray(kotlin.Int){}[0]
    }
}
